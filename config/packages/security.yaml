security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check # or api_login_check as defined in config/routes.yaml
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            access_denied_handler: App\Security\AccessDeniedHandler
            entry_point: App\Security\UnauthorizedHandler

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS, methods: [POST]}
        - { path: ^/api/reset, roles: PUBLIC_ACCESS, methods: [PUT]}
        - { path: ^/api/changePwd, roles: PUBLIC_ACCESS, methods: [PUT]}
        - { path: ^/api/product, roles: ROLE_USER, methods: [GET]}
        - { path: ^/api/product, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE]}
        - { path: ^/api/devis/commercial, roles: ROLE_COMMERCIAL, methods: [GET]}
        - { path: ^/api/devis/client, roles: ROLE_USER, methods: [GET]}
        - { path: ^/api/devis/.*, roles: ROLE_COMMERCIAL, methods: [PUT]}
        - { path: ^/api/devis/.*, roles: ROLE_USER, methods: [GET]}
        - { path: ^/api/devis, roles: ROLE_ADMIN, methods: [GET]}
        - { path: ^/api/devis, roles: ROLE_COMMERCIAL, methods: [POST]}
        - { path: ^/api/prospect, roles: ROLE_COMMERCIAL}
        - { path: ^/api/client, roles: ROLE_COMMERCIAL}
        - { path: ^/api/user, roles: ROLE_ADMIN}
        - { path: ^/api/facture/commercial, roles: ROLE_COMMERCIAL, methods: [ GET ] }
        - { path: ^/api/facture/client, roles: ROLE_USER, methods: [ GET ] }
        - { path: ^/api/facture/.*, roles: ROLE_COMMERCIAL, methods: [ PUT ] }
        - { path: ^/api/facture/.*, roles: ROLE_USER, methods: [ GET ] }
        - { path: ^/api/facture, roles: ROLE_ADMIN, methods: [ GET ] }
        - { path: ^/api/facture, roles: ROLE_COMMERCIAL, methods: [ POST ] }
        - { path: ^/api, roles: ROLE_USER}

    role_hierarchy:
        ROLE_ADMIN: [ROLE_COMMERCIAL, ROLE_USER]
        ROLE_COMMERCIAL: ROLE_USER
        ROLE_USER:
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
